#!/usr/bin/env elixir

# Script para limpar e reparar arquivos √≥rf√£os (registros no banco sem arquivo no S3)
# Execute com: mix run cleanup_orphaned_files.exs

alias MaxGallery.Context
alias MaxGallery.Core.Cypher.Api, as: CypherApi
alias MaxGallery.Storage
require Logger

defmodule OrphanedFilesCleanup do
  def run do
    IO.puts("=== Limpeza de Arquivos √ìrf√£os ===")
    
    # Solicitar dados do usu√°rio
    user_id = IO.gets("Digite o ID do usu√°rio: ") |> String.trim()
    key = IO.gets("Digite a chave de encripta√ß√£o: ") |> String.trim()
    
    IO.puts("Verificando arquivos √≥rf√£os para o usu√°rio: #{user_id}")
    
    case Context.cleanup_orphaned_files(user_id, key) do
      {:ok, count} ->
        IO.puts("‚úÖ Limpeza conclu√≠da com sucesso!")
        IO.puts("üìä Total de arquivos √≥rf√£os removidos: #{count}")
        
      {:error, "invalid key/user"} ->
        IO.puts("‚ùå Erro: Chave de encripta√ß√£o ou usu√°rio inv√°lido")
        
      {:error, reason} ->
        IO.puts("‚ùå Erro durante a limpeza: #{reason}")
    end
  end
  
  def repair do
    IO.puts("=== Reparo de Arquivos √ìrf√£os ===")
    
    # Solicitar dados do usu√°rio
    user_id = IO.gets("Digite o ID do usu√°rio: ") |> String.trim()
    key = IO.gets("Digite a chave de encripta√ß√£o: ") |> String.trim()
    
    IO.puts("Tentando reparar arquivos √≥rf√£os para o usu√°rio: #{user_id}")
    
    case Context.repair_orphaned_files(user_id, key) do
      {:ok, %{repaired: repaired, failed: failed}} ->
        IO.puts("‚úÖ Reparo conclu√≠do!")
        IO.puts("üìä Arquivos reparados: #{repaired}")
        IO.puts("üìä Arquivos que falharam: #{failed}")
        
      {:error, "invalid key/user"} ->
        IO.puts("‚ùå Erro: Chave de encripta√ß√£o ou usu√°rio inv√°lido")
        
      {:error, reason} ->
        IO.puts("‚ùå Erro durante o reparo: #{reason}")
    end
  end
  
  def check_specific_file(user_id, file_id) do
    IO.puts("=== Verifica√ß√£o de Arquivo Espec√≠fico ===")
    IO.puts("Usu√°rio: #{user_id}")
    IO.puts("Arquivo ID: #{file_id}")
    
    case CypherApi.get(file_id) do
      {:ok, file} ->
        IO.puts("‚úÖ Arquivo encontrado no banco de dados")
        IO.puts("   Nome: #{file.name}")
        IO.puts("   Tamanho: #{file.length} bytes")
        IO.puts("   Extens√£o: #{file.ext}")
        
        if Storage.exists?(user_id, file_id) do
          IO.puts("‚úÖ Arquivo existe no S3")
        else
          IO.puts("‚ùå Arquivo N√ÉO existe no S3 (√≥rf√£o)")
          
          confirm = IO.gets("Deseja deletar este registro √≥rf√£o? (s/N): ") |> String.trim() |> String.downcase()
          
          if confirm == "s" do
            case CypherApi.delete(file_id) do
              {:ok, _} ->
                IO.puts("‚úÖ Registro √≥rf√£o deletado com sucesso")
              {:error, reason} ->
                IO.puts("‚ùå Erro ao deletar registro: #{reason}")
            end
          else
            IO.puts("Opera√ß√£o cancelada")
          end
        end
        
      {:error, "not found"} ->
        IO.puts("‚ùå Arquivo n√£o encontrado no banco de dados")
        
      {:error, reason} ->
        IO.puts("‚ùå Erro ao buscar arquivo: #{reason}")
    end
  end
end

# Verificar se foi passado um arquivo espec√≠fico como argumento
case System.argv() do
  ["check", user_id, file_id] ->
    OrphanedFilesCleanup.check_specific_file(user_id, file_id)
    
  ["cleanup"] ->
    OrphanedFilesCleanup.run()
    
  ["repair"] ->
    OrphanedFilesCleanup.repair()
    
  _ ->
    IO.puts("Uso:")
    IO.puts("  mix run cleanup_orphaned_files.exs cleanup   # Remove arquivos √≥rf√£os")
    IO.puts("  mix run cleanup_orphaned_files.exs repair    # Tenta reparar arquivos √≥rf√£os")
    IO.puts("  mix run cleanup_orphaned_files.exs check <user_id> <file_id>")
    IO.puts("")
    IO.puts("Exemplos:")
    IO.puts("  mix run cleanup_orphaned_files.exs cleanup")
    IO.puts("  mix run cleanup_orphaned_files.exs repair")
    IO.puts("  mix run cleanup_orphaned_files.exs check ffee63c4-6422-4a0f-895a-0629535ded7c 26")
end